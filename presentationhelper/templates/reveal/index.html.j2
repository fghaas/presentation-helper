<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>{{ title | default('')}}</title>
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

{% if title is defined %}
    <meta property="og:title" content="{{ title }}" />
{% endif %}
{% if summary is defined %}
    <meta property="og:description" content="{{ summary }}" />
{% endif %}
{% if image is defined %}
    <meta property="og:image" content="{{ image }}" />
{% endif %}

    <!-- reveal.js CSS theme and local overrides -->
    <link rel="stylesheet" href="reveal.js/css/reveal.css"/>
{% if theme is defined %}
    <link rel="stylesheet" href="reveal.js/css/theme/{{ theme }}.css" id="theme"/>
{% endif %}
    <link rel="stylesheet" href="css/reveal-override.css"/>

{% if highlight is defined %}
    <!-- For syntax highlighting -->
    <link rel="stylesheet" href="highlight.js/src/styles/{{ highlight }}.css" />
{% endif %}

    <!-- For JavaScript-generated QR codes -->
    <link rel="stylesheet" href="css/qrcode.css" />

    <!-- If the query includes 'print-pdf', use the PDF print sheet -->
    <script>
<![CDATA[
document.write( '<link rel="stylesheet" href="reveal.js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
]]>
    </script>
  </head>
  <body>
    <div class="reveal">
      <div class="slides">
{% for section in sections | default([]) %}
{% if section.type | default('markdown') == 'qrcode' %}
        <section id="qrcode" data-menu-title="QR code">
          <div class="qrcode" id="qrcode-talk"></div>
          <p><a href="{{ section.link }}" target="_blank"
                id="talk">{{ section.link }}</a></p>
        </section>
{% else %}
        <section id="{{ section.id | default(section.name | lower) }}"
{% if markdown is defined %}
                 data-markdown="{{ section.path | default(markdown.path | default('markdown') ~ '/' ~ section.name | lower ~ '.md')  }}"
                 data-separator="{{ section.separator | default(markdown.separator | default('^\n\n\n')) }}"
                 data-separator-vertical="{{ section['separator-vertical'] | default(markdown['separator-vertical'] | default('^\n\n')) }}"
                 data-separator-notes="{{ section['separator-notes'] | default(markdown['separator-notes'] | default('^Note:')) }}">
{% else %}
                 data-markdown="{{ section.path | default('markdown/' ~ section.name | lower ~ '.md')  }}"
                 data-separator="{{ section.separator | default('^\n\n\n') }}"
                 data-separator-vertical="{{ section['separator-vertical'] | default('^\n\n') }}"
                 data-separator-notes="{{ section['separator-notes'] | default('^Note:') }}">
{% endif %}
        </section>
{% endif %}
{% endfor %}
      </div>
    </div>
    <script src="qrcodejs/qrcode.js"></script>
    <script>
/* Grab all links and iterate over them */
document.querySelectorAll('a[href]').forEach(function(a) {
  /* Find an element named #qrcode-id, and render the QR code there */
  document.querySelectorAll('#qrcode-' + a.id).forEach(function(target) {
    var qr = new QRCode(target, {
        width : 500,
        height : 500,
        colorDark : "#000000",
        colorLight : "rgba(255,255,255,0)",
    });
    qr.makeCode(a.href);
  });
});
    </script>

    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

{% if controls is defined %}
    controls: {{ controls.enable | default(true)| lower }},
    controlsTutorial: {{ controls.tutorial | default(true) | lower }},
    controlsLayout: '{{ controls.layout | default("bottom-right") }}',
    controlsBackArrows: '{{ controls.back_arrows | default("faded") }}',
{% endif %}
    progress: {{ progress | default(true) | lower }},
    history: true,
    center: true,
    showNotes: {{ show_notes | default(false) | lower }},

{% if background is defined %}
    // Parallax background image
    parallaxBackgroundImage: '{{ background.image }}',

    // Parallax background size
    parallaxBackgroundSize: '{{ background.size }}', // CSS syntax, e.g. "2100px 900px"
{% endif %}

    theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
    transition: Reveal.getQueryHash().transition || '{{ transition | default("fade") }}', // default/cube/page/concave/zoom/linear/fade/none

{% if menu | default(false) %}
    menu: {
        themes: false,
        transitions: false,
        openButton: false,
        openSlideNumber: true,
        markers: true
    },
{% endif %}

{% if keyboard is defined %}
{{ keyboard | tojson }},
{% endif %}

{% if multiplex is defined %}
    multiplex: {
        secret: '{{ multiplex.secret | default("null") }}',
        id: '{{ multiplex.id }}',
        url: '{{ multiplex.url | default("https://reveal-js-multiplex-ccjbegmaii.now.sh") }}'
    },
{% endif %}

    // Optional libraries used to extend on reveal.js
    dependencies: [
        { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
        { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        { src: 'reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
        { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
        { src: 'reveal.js/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
{% if multiplex is defined %}
        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },
{% if multiplex.secret is defined %}
        { src: 'reveal.js/plugin/multiplex/master.js', async: true },
{% else %}
        { src: 'reveal.js/plugin/multiplex/client.js', async: true },
{% endif %}
{% endif %}
{% if menu | default(false) %}
        { src: 'reveal.js-menu/menu.js', async: true, condition: function() { return !!document.body.classList; } },
{% endif %}
    ]
});

{% if mouse is defined %}
      window.addEventListener("mousedown", handleClick, false);
      window.addEventListener("contextmenu", function(e) { e.preventDefault(); }, false);
      function handleClick(e) {
          e.preventDefault();
{% if mouse.next %}
          if(e.button === 0) Reveal.next();
{% endif %}
{% if mouse.prev %}
          if(e.button === 2) Reveal.prev();
{% endif %}
      }
{% endif %}
    </script>
  </body>
</html>
